{"version":3,"sources":["Header.js","Footer.js","BrowseDates.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","className","title","Footer","footercontent","browseDates","data","i","quotes","length","push","Number","minNum","Math","min","places","map","place","Name","SkyscannerCode","CountryName","CityName","CityId","PlaceId","carriers","carrier","CarrierId","quote","currencies","currency","Symbol","quoteParam","MinPrice","style","color","QuoteId","App","state","eachPlace","query","destination","location","outboundDate","inboundDate","eachCarrier","eachDate","eachQuote","eachCurrency","handleSubmit","bind","apiCall","handleCurrency","event","this","setState","target","value","preventDefault","a","reqOptions","method","headers","process","fetch","response","json","Places","Currencies","Carriers","Dates","Quotes","onSubmit","type","name","onChange","e","required","handleDestination","handleLocation","handleOutboundDate","handleInboundDate","placeholder","handleOnChange","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29f7d55e.chunk.js","sourcesContent":["import React from 'react';\nimport './css/Header.css';\n\nfunction Header(props) {\n        return(\n            <div className=\"header-content\">\n                <h1>{props.title}</h1>\n            </div>\n        )\n}\n\nexport default Header;","import React from \"react\";\nimport './css/Footer.css';\n\n\nfunction Footer(props) {\n    return(\n        <div className=\"footer-content\">\n            <p>{props.footercontent}</p>\n        </div>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport './css/BrowseDates.css';\n\n\n\nfunction browseDates(props) {   \n    const data = []\n    for (let i = 0; i < props.quotes.length; i++){ // for loop to add all the prices of the flights into an empty array\n        data.push(Number(props.quotes[i][\"MinPrice\"]))    \n    }\n    const minNum = Math.min(...data); // grabbing the cheapest price from the array of prices\n    function minNumFunc(quoteParam) { // turns the cheapest price into a red color. I call this function in line 80 and add \"quote.MinPrice\" as the parameter. \"quote.MinPrice\" gives each price in a quote \n        if (quoteParam === minNum) {\n            return (\n                    <td style={{color: \"red\"}}>{quoteParam}</td>\n            )\n        } else {                      // if it's not the cheapest price, just return the price in the regular color\n            return (\n                <td>{quoteParam}</td>\n            )\n        }       \n    }  \n    return(\n        <div>\n            <table className=\"airport-table\">\n                <thead>\n                    <tr>\n                        <th>Airport Names</th>\n                        <th>Code</th> \n                        <th>Country</th>\n                        <th>City</th>\n                        <th>City ID</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {props.places.map(place => {\n                            return(        \n                                <tr key={place.PlaceId}> \n                                    <td>{place.Name}</td>\n                                    <td>{place.SkyscannerCode}-sky</td>\n                                    <td>{place.CountryName}</td>\n                                    <td>{place.CityName}</td>\n                                    <td>{place.CityId}</td> \n                                </tr>   \n                            )\n                        })}\n                </tbody>\n            </table>\n                                <table className=\"airport-table2\">\n                                    <thead>\n                                        <tr>\n                                            <th>Available Airlines</th>        \n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                    {props.carriers.map(carrier => {\n                                            return(\n                                                <tr key={carrier.CarrierId}>\n                                                     <td>{carrier.Name}</td>\n                                                </tr>                                   \n                                            )\n                                            })}\n                                    </tbody>\n                                </table>                      \n\n                                <table className=\"airport-table3\">\n                                    <thead>\n                                        <tr>\n                                            <th>Prices</th>                 \n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                    {props.quotes.map(quote => {\n                                                    return(\n                                                        <tr key={quote.QuoteId}>\n                                                            <td>{props.currencies.map(currency => {\n                                                            return(  \n                                                                <td>{currency.Symbol}</td>                                                                                 \n                                                                )\n                                                        })}{minNumFunc(quote.MinPrice)}</td>    \n                                                         </tr>                                                                                  \n                                                        )\n                                                })}\n                                        \n                                    </tbody>\n                                </table>\n            </div>\n        )\n}\n\nexport default browseDates;","import React, {Component} from 'react'; \nimport './App.css';\nimport Header from './Header';\nimport Footer from './Footer';\nimport BrowseDates from './BrowseDates';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      eachPlace: [], //empty arrays to put the information from api\n      query: \"\",\n      currency: \"USD\",\n      destination: \"LAX-sky\",\n      location: \"SFO-sky\",       // filled in parameters that can be changed on the app\n      outboundDate: \"2021-03-21\",\n      inboundDate: \"2021-04\",\n      eachCarrier: [],\n      eachDate: [],\n      eachQuote: [],\n      eachCurrency: [],\n    }\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.apiCall = this.apiCall.bind(this)\n    this.handleCurrency = this.handleCurrency.bind(this) \n  }\n  handleOnChange(event) {\n    this.setState({query: event.target.value}) // Setting the state for each parameters so it can change everytime the user changes it\n  }\n  handleCurrency(event) {\n    this.setState({currency: event.target.value})\n  }\n  handleDestination(event) {\n    this.setState({destination: event.target.value})\n  }\n  handleLocation(event) {\n    this.setState({location: event.target.value})\n  }\n  handleOutboundDate(event) {\n    this.setState({outboundDate: event.target.value})\n  }\n  handleInboundDate(event) {\n    this.setState({inboundDate: event.target.value})\n  }\n  handleSubmit(event) {\n    event.preventDefault()\n    this.apiCall(this.state.query) // handling the submit button by letting the api call function accept the query\n    }\n\n  async apiCall() {\n    const reqOptions = {\n        method: 'GET',\n        headers: {\n          \"x-rapidapi-key\": `${process.env.REACT_APP_API_KEY}`,\n\t        \"x-rapidapi-host\": \"skyscanner-skyscanner-flight-search-v1.p.rapidapi.com\",\n\t        \"useQueryString\": true\n        }\n    }\n    let response = await fetch(\"https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/browsedates/v1.0/US/\"  // concatenation of parameters\n     + this.state.currency + \"/en-US/\" \n     + this.state.location + \"/\" \n     + this.state.destination + \"/\"\n     + this.state.outboundDate + \"/\" \n     + this.state.inboundDate\n     + \"/?query=\" + this.state.query, reqOptions)\n    response = await response.json()\n    this.setState({eachPlace: response.Places}) // setting these states to place the json data into arrays \n    this.setState({eachCurrency: response.Currencies})\n    this.setState({eachCarrier: response.Carriers})\n    this.setState({eachDate: response.Dates})\n    this.setState({eachQuote: response.Quotes}) \n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <Header title=\"Airport Flight Search\"/>\n        <h4 style={{color: \"red\"}}> We Have Put Some Sample Inputs but You Can Change Them. Please Fill Out These Inputs Before Submitting <br/> * (Red Price = Cheapest)</h4>\n        <div className=\"search-params\">\n            <form className=\"currency-search\" onSubmit={this.handleSubmit}>\n            <label>Currency (ex: USD)  </label>\n              <input type=\"text\" name=\"currency\" onChange={(e)=>this.handleCurrency(e)} value={this.state.currency} required/>\n            </form>\n            <form className=\"currency-search\" onSubmit={this.handleSubmit}>\n            <label>Destination (ex: LAX-sky)  </label>\n              <input type=\"text\" name=\"destination\" onChange={(e)=>this.handleDestination(e)} value={this.state.destination} required/>\n            </form>\n            <form className=\"currency-search\" onSubmit={this.handleSubmit}>\n            <label> Current Location (ex: SFO-sky)  </label>\n              <input type=\"text\" name=\"location\" onChange={(e)=>this.handleLocation(e)} value={this.state.location} required/>\n            </form>\n            <form className=\"currency-search\" onSubmit={this.handleSubmit}>\n            <label>Outbound Date (ex: 2021-03-21)  </label>\n              <input type=\"text\" name=\"outbound-date\" onChange={(e)=>this.handleOutboundDate(e)} value={this.state.outboundDate} required/>\n            </form>\n            <form className=\"currency-search\" onSubmit={this.handleSubmit}>\n            <label>Inbound Date (ex: 2021-04)  </label>\n              <input type=\"text\" name=\"inbound-date\" onChange={(e)=>this.handleInboundDate(e)} value={this.state.inboundDate} required/>\n            </form>\n        </div>\n \n        <div className=\"search-div\" onSubmit={this.handleSubmit}>\n          <form onSubmit={this.handleSubmit}>\n            <input type=\"text\" placeholder=\"Search any State\" name=\"search\" onChange={(e)=>this.handleOnChange(e)} value={this.state.query} required/>\n            <button type=\"submit\">Submit</button>\n          </form>\n        </div>\n        <div>\n          <BrowseDates places={this.state.eachPlace} quotes={this.state.eachQuote} carriers={this.state.eachCarrier} currencies={this.state.eachCurrency}  />\n        </div>\n        </header>\n        <Footer footercontent=\"Flight Search Application\"/>\n      </div>\n    );\n     \n  }\n  }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}